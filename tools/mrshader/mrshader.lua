#!/bin/lua

local function startswith(str, start)
	return str:sub(1, #start) == start
end

-- TODO compute shaders exist
local function get_shader_srcs(shader_src)
	local shader_file = io.open(shader_src, "r")
	if shader_file == nil then
		error("couldn't open file " .. shader_src, 1)
		return {"", ""}
	end

	local lines = shader_file:lines()
	local current_source = "" -- "vert" or "frag"
	local vert_src = {}
	local frag_src = {}

	for line in lines do
		if startswith(line, "#version") then
			table.insert(vert_src, line)
			table.insert(frag_src, line)
		end

		if line == "#pragma mrshader vertex" then
			current_source = "vert"
		elseif line == "#pragma mrshader fragment" then
			current_source = "frag"
		else
			if current_source == "vert" then table.insert(vert_src, line)
			elseif current_source == "frag" then table.insert(frag_src, line)
			else warn("line not in a vertex or fragment shader") end
		end
	end

	io.close(shader_file)

	return {
		vert = vert_src,
		frag = frag_src
	}
end

local function make_header(vertlines, fraglines, dest, strname)
	local headerf = io.open(dest, "w")
	if headerf == nil then
		error("couldn't open file " .. dest, 1)
	end

	-- usual header stuff
	local guard = "_"..strname.."_H"
	headerf:write("// Autogenerated by MrShader\n")
	headerf:write("// Source: " .. arg[1] .. "\n\n")
	headerf:write("#ifndef "..guard.."\n")
	headerf:write("#define "..guard.."\n\n")

	-- man
	headerf:write("#ifdef __cplusplus\n")
	headerf:write("constexpr const char* "..strname.."_VERTEX = \n")
	headerf:write("#else\n")
	headerf:write("static const char* "..strname.."_VERTEX = \n")
	headerf:write("#endif")
	for _, line in pairs(vertlines) do
		-- TODO this will break
		line = line:gsub("\t", "\\t")
		line = line:gsub("\"", "\\\"")

		headerf:write("\n\t\"" .. line .. "\\n\"")
	end
	headerf:write(";\n\n")

	headerf:write("#ifdef __cplusplus\n")
	headerf:write("constexpr const char* "..strname.."_FRAGMENT = \n")
	headerf:write("#else\n")
	headerf:write("static const char* "..strname.."_FRAGMENT = \n")
	headerf:write("#endif")
	for _, line in pairs(fraglines) do
		-- TODO this will break
		line = line:gsub("\t", "\\t")
		line = line:gsub("\"", "\\\"")

		headerf:write("\n\t\"" .. line .. "\\n\"")
	end
	headerf:write(";\n")

	-- more usual header stuff
	headerf:write("\n#endif\n")

	io.close(headerf)
end

if #arg < 3 then
	print("Usage: [shader] [header] [string name]")
else
	local shader = arg[1]
	local header = arg[2]
	local strname = arg[3]
	local srcs = get_shader_srcs(shader)
	make_header(srcs.vert, srcs.frag, header, strname)
end
