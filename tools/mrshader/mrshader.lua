#!/bin/lua

local function startswith(str, start)
	return str:sub(1, #start) == start
end

-- TODO compute shaders exist
local function get_shader_srcs(shader_src)
	local shader_file = io.open(shader_src, "r")
	if shader_file == nil then
		error("couldn't open file " .. shader_src, 1)
		return {"", ""}
	end

	local lines = shader_file:lines()
	local current_source = "" -- "vert" or "frag"
	local shader_name = ""
	local vert_src = {}
	local frag_src = {}
	local defines = {}

	local i = 0
	for line in lines do
		i = i + 1
		if startswith(line, "#version") then
			table.insert(vert_src, line)
			table.insert(frag_src, line)
		end

		-- pragma balls
		if line == "#pragma mrshader vertex" then
			current_source = "vert"
		elseif line == "#pragma mrshader fragment" then
			current_source = "frag"
		elseif startswith(line, "#pragma mrshader name ") then
			shader_name = line:sub(#"#pragma mrshader name "+1)
		elseif startswith(line, "#pragma mrshader define ") then
			local define = line:sub(#"#pragma mrshader define "+1)
			local name, val = define:match("^%s*(%S+)%s*(.*)$")
			assert(name)
			assert(val)
			defines[name] = val
		elseif startswith(line, "#pragma mrshader include ") then
			-- TODO you can't put a comment at the end of the line lmao
			-- TODO relative paths don't work
			-- TODO please just rewrite mrshader eventually
			local path = line:sub(#"#pragma mrshader include "+1)

			local function include(incpath)
				local incfile = io.open(incpath, "r")
				if incfile == nil then
					error("couldn't include file " .. incpath, 1)
				end

				for include_line in incfile:lines() do
					if startswith(include_line, "#pragma mrshader define ") then
						local define = include_line:sub(#"#pragma mrshader define "+1)
						local name, val = define:match("^%s*(%S+)%s*(.*)$")
						assert(name)
						assert(val)
						defines[name] = val
					end

					if startswith(include_line, "#pragma mrshader include ") then
						local incincpath =
							include_line:sub(#"#pragma mrshader include "+1)
						include(incincpath)
					end

					-- TODO debugging headers will be obnoxious like this
					-- though i don't think glsl supports anything better
					if current_source == "vert" then
						table.insert(vert_src, "#line "..i)
						table.insert(vert_src, include_line)
					elseif current_source == "frag" then
						table.insert(frag_src, "#line "..i)
						table.insert(frag_src, include_line)
					end
				end
			end
			include(path)
		-- not a pragma balls
		else
			if current_source == "vert" then
				table.insert(vert_src, "#line "..i)
				table.insert(vert_src, line)
			elseif current_source == "frag" then
				table.insert(frag_src, "#line "..i)
				table.insert(frag_src, line)
			else
				warn("line not in a vertex or fragment shader")
			end
		end
	end

	io.close(shader_file)

	assert(shader_name ~= "", "dumbass you forgot '#pragma mrshader name WHATEVER_THE_FUCK_YOU_WANT'")

	return {
		vert = vert_src,
		frag = frag_src,
		shader_name = shader_name,
		defines = defines,
	}
end

local function make_header(vertlines, fraglines, dest, strname, defines)
	local headerf = io.open(dest, "w")
	if headerf == nil then
		error("couldn't open file " .. dest, 1)
	end

	-- usual header stuff
	local guard = "_"..strname.."_H"
	headerf:write("// Autogenerated by MrShader\n")
	headerf:write("// Source: " .. arg[1] .. "\n\n")
	headerf:write("#ifndef "..guard.."\n")
	headerf:write("#define "..guard.."\n\n")

	-- man
	headerf:write("#ifdef __cplusplus\n")
	headerf:write("constexpr const char* "..strname.."_VERTEX = \n")
	headerf:write("#else\n")
	headerf:write("static const char* "..strname.."_VERTEX = \n")
	headerf:write("#endif")
	for _, line in pairs(vertlines) do
		-- TODO this will break
		line = line:gsub("\t", "\\t")
		line = line:gsub("\"", "\\\"")

		headerf:write("\n\t\"" .. line .. "\\n\"")
	end
	headerf:write(";\n\n")

	headerf:write("#ifdef __cplusplus\n")
	headerf:write("constexpr const char* "..strname.."_FRAGMENT = \n")
	headerf:write("#else\n")
	headerf:write("static const char* "..strname.."_FRAGMENT = \n")
	headerf:write("#endif")
	for _, line in pairs(fraglines) do
		-- TODO this will break
		line = line:gsub("\t", "\\t")
		line = line:gsub("\"", "\\\"")

		headerf:write("\n\t\"" .. line .. "\\n\"")
	end
	headerf:write(";\n\n")

	-- defines
	for name, val in pairs(defines) do
		headerf:write("#define "..strname.."_"..name.." "..val.."\n")
	end

	-- more usual header stuff
	headerf:write("\n#endif\n")

	io.close(headerf)
end

if #arg ~= 2 then
	print("Usage: [shader] [header]")
	print("Example: ./mrshader.lua shadingit.glsl shadingit.glsl.h")
else
	local shader = arg[1]
	local header = arg[2]
	local srcs = get_shader_srcs(shader)
	make_header(srcs.vert, srcs.frag, header, srcs.shader_name, srcs.defines)
end
