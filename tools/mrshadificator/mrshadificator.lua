function get_shader_srcs(shadersrc)
	local shaderf = io.open(shadersrc, "r")
	if shaderf == nil then
		error("couldn't open file " .. shadersrc, 1)
		return {"", ""}
	end

	local lines = shaderf:lines()
	local cursrc = ""
	local vertsrc = {}
	local fragsrc = {}
	for line in lines do
		if line == "#shader vertex" then
			cursrc = "vert"
		elseif line == "#shader fragment" then
			cursrc = "frag"
		else
			if cursrc == "vert" then table.insert(vertsrc, line)
			elseif cursrc == "frag" then table.insert(fragsrc, line)
			else warn("line not in a vertex or fragment shader") end
		end
	end

	io.close(shaderf)
	return {vertsrc, fragsrc}
end

function make_header(vertlines, fraglines, dest, namespace, strname)
	local headerf = io.open(dest, "w")
	if headerf == nil then
		error("couldn't open file " .. dest, 1)
	end

	-- usual header stuff
	local guard = "_"..namespace.."_"..strname.."_H"
	headerf:write("// Autogenerated by MrShadificator\n")
	headerf:write("// Source: " .. arg[1] .. "\n\n")
	headerf:write("#ifndef "..guard.."\n")
	headerf:write("#define "..guard.."\n\n")

	-- namespace deez
	headerf:write("namespace "..namespace.." {\n\n")

	-- man
	headerf:write("constexpr const char* "..strname.."_VERTEX = ")
	for _, line in pairs(vertlines) do
		-- TODO this will break
		line = line:gsub("\t", "\\t")
		line = line:gsub("\"", "\\\"")

		headerf:write("\n\t\"" .. line .. "\\n\"")
	end
	headerf:write(";\n\n")

	headerf:write("constexpr const char* "..strname.."_FRAGMENT = ")
	for _, line in pairs(fraglines) do
		-- TODO this will break
		line = line:gsub("\t", "\\t")
		line = line:gsub("\"", "\\\"")

		headerf:write("\n\t\"" .. line .. "\\n\"")
	end
	headerf:write(";\n")

	-- namespace.
	headerf:write("\n}\n")

	-- more usual header stuff
	headerf:write("\n#endif\n")

	io.close(headerf)
end

if #arg < 4 then
	print("Usage: [shader] [header] [namespace] [string name]")
else
	local srcs = get_shader_srcs(arg[1])
	make_header(srcs[1], srcs[2], arg[2], arg[3], arg[4])
end
