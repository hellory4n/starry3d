// Autogenerated by MrShader
// Source: starry/shader/terrain.glsl

#ifndef _ST_TERRAIN_SHADER_H
#define _ST_TERRAIN_SHADER_H

#ifdef __cplusplus
constexpr const char* ST_TERRAIN_SHADER_VERTEX = 
#else
static const char* ST_TERRAIN_SHADER_VERTEX = 
#endif
	"#version 430 core\n"
	"// TODO add includes to mrshader\n"
	"struct Vertex {\n"
	"\tuvec3 position;\n"
	"\tuint normal;\n"
	"\tuint quad_corner;\n"
	"\tbool shaded;\n"
	"\tbool using_texture;\n"
	"\tuint texture_id;\n"
	"\tuvec4 color;\n"
	"};\n"
	"\n"
	"#define NORMAL_FORWARD 0u\n"
	"#define NORMAL_BACK 1u\n"
	"#define NORMAL_LEFT 2u\n"
	"#define NORMAL_RIGHT 3u\n"
	"#define NORMAL_UP 4u\n"
	"#define NORMAL_DOWN 5u\n"
	"\n"
	"#define QUAD_CORNER_TOP_LEFT 0u\n"
	"#define QUAD_CORNER_TOP_RIGHT 1u\n"
	"#define QUAD_CORNER_BOTTOM_LEFT 2u\n"
	"#define QUAD_CORNER_BOTTOM_RIGHT 3u\n"
	"\n"
	"Vertex unpack_vertex(uvec2 packed)\n"
	"{\n"
	"\tuint low = packed.x;\n"
	"\tuint high = packed.y;\n"
	"\tVertex v;\n"
	"\n"
	"\tv.position.x = low & 0xFFu;\n"
	"\tv.position.y = (low >> 8)  & 0xFFu;\n"
	"\tv.position.z = (low >> 16) & 0xFFu;\n"
	"\n"
	"\tv.normal = (low >> 24) & 0xFu;\n"
	"\tv.quad_corner = (low >> 28) & 0x3u;\n"
	"\tv.shaded = ((low >> 30) & 0x1u) != 0u;\n"
	"\tv.using_texture = ((low >> 31) & 0x1u) != 0u;\n"
	"\n"
	"\tif (v.using_texture) {\n"
	"\t\tv.texture_id = high & 0x3FFFu;\n"
	"\t\tv.color = uvec4(0);\n"
	"\t}\n"
	"\telse {\n"
	"\t\tv.color.r = (high >> 0) & 0xFFu;\n"
	"\t\tv.color.g = (high >> 8) & 0xFFu;\n"
	"\t\tv.color.b = (high >> 16) & 0xFFu;\n"
	"\t\tv.color.a = (high >> 24) & 0xFFu;\n"
	"\t\tv.texture_id = 0u;\n"
	"\t}\n"
	"\n"
	"\treturn v;\n"
	"}\n"
	"\n"
	"struct Rect {\n"
	"\tuint x;\n"
	"\tuint y;\n"
	"\tuint width;\n"
	"\tuint height;\n"
	"}\n"
	"\n"
	"// vertices are hyper optimized to safe space\n"
	"layout (location = 0) in uvec2 vs_packed;\n"
	"\n"
	"out vec2 fs_texcoords;\n"
	"out vec4 fs_color;\n"
	"flat out bool fs_using_texture;\n"
	"flat out bool fs_shaded;\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform mat4 u_view;\n"
	"uniform mat4 u_projection;\n"
	"\n"
	"#define CHUNK_SIZE 32\n"
	"uniform uvec3 u_chunk;\n"
	"uniform uvec2 u_atlas_size;\n"
	"\n"
	"layout(binding = 0, std430) readonly buffer atlas {\n"
	"\t// storing the whole 16k rects is faster than implementing hashmaps on the gpu\n"
	"\tRect u_atlas_textures[];\n"
	"}\n"
	"\n"
	"// get texcoords (it's faster to calculate it in the vertex shader since it runs less times)\n"
	"vec2 get_texcoords(Vertex v)\n"
	"{\n"
	"\tvec2 texcoords;\n"
	"\tRect texture_rect = u_atlas_texture[v.texture_id];\n"
	"\n"
	"\tswitch (v.quad_corner) {\n"
	"\tcase QUAD_CORNER_TOP_LEFT:\n"
	"\t\ttexcoords = vec2(float(texture_rect.x), float(texture_rect.y));\n"
	"\t\tbreak;\n"
	"\tcase QUAD_CORNER_TOP_RIGHT:\n"
	"\t\ttexcoords = vec2(float(texture_rect.x + texture_rect.width), float(texture_rect.y));\n"
	"\t\tbreak;\n"
	"\tcase QUAD_CORNER_BOTTOM_LEFT:\n"
	"\t\ttexcoords = vec2(float(texture_rect.x), float(texture_rect.y + texture_rect.height));\n"
	"\t\tbreak;\n"
	"\tcase QUAD_CORNER_BOTTOM_RIGHT:\n"
	"\t\ttexcoords = vec2(float(texture_rect.x + texture_rect.width),\n"
	"\t\t\tfloat(texture_rect.y + texture_rect.height)\n"
	"\t\t);\n"
	"\t\tbreak;\n"
	"\t}\n"
	"\n"
	"\treturn texcoords / vec2(u_atlas_size);\n"
	"}\n"
	"\n"
	"void main()\n"
	"{\n"
	"\tVertex v = unpack_vertex(vs_packed);\n"
	"\n"
	"\tvec3 position = vec3(v.position) * vec3(u_chunk);\n"
	"\tgl_Position = u_projection * u_view * u_model * vec4(position, 1.0);\n"
	"\n"
	"\tif (v.using_texture) {\n"
	"\t\tfs_texcoords = get_texcoords(v);\n"
	"\t\tfs_color = vec4(1, 1, 1, 1);\n"
	"\t}\n"
	"\telse {\n"
	"\t\tfs_texcoords = vec2(0, 0);\n"
	"\t\tfs_color = vec4(v.color) / 255;\n"
	"\t}\n"
	"\tfs_using_texture = v.using_texture;\n"
	"\tfs_shaded = v.shaded;\n"
	"}\n"
	"\n";

#ifdef __cplusplus
constexpr const char* ST_TERRAIN_SHADER_FRAGMENT = 
#else
static const char* ST_TERRAIN_SHADER_FRAGMENT = 
#endif
	"#version 430 core\n"
	"in vec2 fs_texcoords;\n"
	"in vec4 fs_color;\n"
	"flat in bool fs_using_texture;\n"
	"flat in bool fs_shaded;\n"
	"\n"
	"out vec4 frag_color;\n"
	"\n"
	"uniform sampler2D u_texture;\n"
	"\n"
	"void main()\n"
	"{\n"
	"\t// TODO lighting\n"
	"\tif (fs_using_texture) {\n"
	"\t\tfrag_color = texture(u_texture, fs_texcoords);\n"
	"\t}\n"
	"\telse {\n"
	"\t\tfrag_color = fs_color;\n"
	"\t}\n"
	"}\n";

#define ST_TERRAIN_SHADER_U_ATLAS_SIZE "u_atlas_size"
#define ST_TERRAIN_SHADER_U_MODEL "u_model"
#define ST_TERRAIN_SHADER_SSBO_ATLAS 0
#define ST_TERRAIN_SHADER_U_PROJECTION "u_projection"
#define ST_TERRAIN_SHADER_U_VIEW "u_view"
#define ST_TERRAIN_SHADER_U_CHUNK "u_chunk"

#endif
