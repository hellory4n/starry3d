#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i starry/shader/terrain.glsl -o starry/shader/terrain.glsl.h -l glsl430:metal_macos

    Overview:
    =========
    Shader program: 'terrain':
        Get shader desc: terrain_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_terrain_vs_position => 0
            ATTR_terrain_vs_texture_id => 1
    Bindings:
        Uniform block 'params':
            C struct: params_t
            Bind slot: UB_params => 0
        Storage buffer 'fs_atlas':
            C struct: Rect_t
            Bind slot: SBUF_fs_atlas => 0
            Readonly: true
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before terrain.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_terrain_vs_position (0)
#define ATTR_terrain_vs_texture_id (1)
#define UB_params (0)
#define SBUF_fs_atlas (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct params_t {
    tr::Matrix4x4 u_model;
    tr::Matrix4x4 u_view;
    tr::Matrix4x4 u_projection;
    tr::Vec2<int32> u_atlas_size;
    uint8_t _pad_200[8];
} params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(4) typedef struct Rect_t {
    int32 x;
    int32 y;
    int32 w;
    int32 h;
} Rect_t;
#pragma pack(pop)
/*
    #version 430

    struct params
    {
        mat4 u_model;
        mat4 u_view;
        mat4 u_projection;
        ivec2 u_atlas_size;
    };

    uniform params _20;

    layout(location = 0) in vec3 vs_position;
    layout(location = 0) flat out int fs_texture_id;
    layout(location = 1) in int vs_texture_id;
    layout(location = 1) flat out ivec2 fs_atlas_size;

    void main()
    {
        gl_Position = ((_20.u_projection * _20.u_view) * _20.u_model) * vec4(vs_position, 1.0);
        fs_texture_id = vs_texture_id;
        fs_atlas_size = _20.u_atlas_size;
    }

*/
static const uint8_t vs_source_glsl430[506] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x75,0x5f,0x6d,0x6f,0x64,0x65,0x6c,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x75,0x5f,0x76,0x69,0x65,0x77,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x75,0x5f,0x70,0x72,0x6f,0x6a,
    0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,
    0x32,0x20,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x20,0x5f,0x32,0x30,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x66,0x6c,0x61,0x74,0x20,0x6f,0x75,0x74,
    0x20,0x69,0x6e,0x74,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x69,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x69,0x6e,0x74,0x20,
    0x76,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x66,0x6c,0x61,0x74,0x20,0x6f,0x75,0x74,0x20,0x69,0x76,0x65,
    0x63,0x32,0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x28,0x28,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x70,0x72,0x6f,0x6a,0x65,
    0x63,0x74,0x69,0x6f,0x6e,0x20,0x2a,0x20,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x76,0x69,
    0x65,0x77,0x29,0x20,0x2a,0x20,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x6d,0x6f,0x64,0x65,
    0x6c,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x20,0x3d,
    0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,
    0x65,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,
    0x73,0x69,0x7a,0x65,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 430

    struct Texture
    {
        uint id;
        uint texcoord;
    };

    struct Rect
    {
        int x;
        int y;
        int w;
        int h;
    };

    layout(binding = 0, std430) readonly buffer fs_atlas
    {
        Rect u_atlas[];
    } _58;

    layout(location = 0) out vec4 frag_color;
    layout(location = 1) flat in ivec2 fs_atlas_size;
    layout(location = 0) flat in int fs_texture_id;

    Texture unpack_texture_id(uint src)
    {
        return Texture(src >> uint(16), src & 65535u);
    }

    vec2 get_texcoord(Texture t)
    {
        float _89 = float(fs_atlas_size.x);
        float _90 = float(_58.u_atlas[t.id].x) / _89;
        float _98 = float(fs_atlas_size.y);
        float _99 = float(_58.u_atlas[t.id].y) / _98;
        float _110 = float(_58.u_atlas[t.id].x + _58.u_atlas[t.id].w) / _89;
        float _121 = float(_58.u_atlas[t.id].y + _58.u_atlas[t.id].h) / _98;
        switch (t.texcoord)
        {
            case 0u:
            {
                return vec2(_90, _99);
            }
            case 1u:
            {
                return vec2(_110, _99);
            }
            case 2u:
            {
                return vec2(_110, _121);
            }
            case 3u:
            {
                return vec2(_90, _121);
            }
            default:
            {
                return vec2(0.0);
            }
        }
    }

    void assert(bool x)
    {
        if (x)
        {
            frag_color = vec4(1.0, 0.0, 0.0, 1.0);
        }
        else
        {
            frag_color = vec4(0.0, 1.0, 0.0, 1.0);
        }
    }

    void main()
    {
        uint param = uint(fs_texture_id);
        Texture param_1 = unpack_texture_id(param);
        bool _162 = _58.u_atlas[0].w == 16;
        bool _167;
        if (_162)
        {
            _167 = fs_texture_id >= 0;
        }
        else
        {
            _167 = _162;
        }
        bool param_2 = _167;
        assert(param_2);
    }

*/
static const uint8_t fs_source_glsl430[1671] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x69,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x75,0x69,0x6e,0x74,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x52,0x65,0x63,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x77,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x68,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x20,
    0x3d,0x20,0x30,0x2c,0x20,0x73,0x74,0x64,0x34,0x33,0x30,0x29,0x20,0x72,0x65,0x61,
    0x64,0x6f,0x6e,0x6c,0x79,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x66,0x73,0x5f,
    0x61,0x74,0x6c,0x61,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x52,0x65,0x63,0x74,
    0x20,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x5d,0x3b,0x0a,0x7d,0x20,0x5f,0x35,
    0x38,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x31,0x29,0x20,0x66,0x6c,0x61,0x74,0x20,0x69,0x6e,0x20,0x69,0x76,0x65,0x63,0x32,
    0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x66,0x6c,0x61,0x74,0x20,0x69,0x6e,0x20,0x69,0x6e,0x74,
    0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,0x0a,
    0x0a,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x28,0x75,0x69,0x6e,0x74,0x20,
    0x73,0x72,0x63,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x73,0x72,0x63,0x20,0x3e,0x3e,
    0x20,0x75,0x69,0x6e,0x74,0x28,0x31,0x36,0x29,0x2c,0x20,0x73,0x72,0x63,0x20,0x26,
    0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,
    0x32,0x20,0x67,0x65,0x74,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x28,0x54,
    0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x39,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x28,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x2e,
    0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,
    0x30,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x35,0x38,0x2e,0x75,0x5f,
    0x61,0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x78,0x29,0x20,0x2f,
    0x20,0x5f,0x38,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x39,0x38,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x66,0x73,0x5f,0x61,
    0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x39,0x20,0x3d,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x28,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,
    0x74,0x2e,0x69,0x64,0x5d,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x39,0x38,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x30,0x20,0x3d,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,
    0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x78,0x20,0x2b,0x20,0x5f,0x35,0x38,
    0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x77,
    0x29,0x20,0x2f,0x20,0x5f,0x38,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x31,0x32,0x31,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,
    0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,
    0x5d,0x2e,0x79,0x20,0x2b,0x20,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,
    0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x68,0x29,0x20,0x2f,0x20,0x5f,0x39,0x38,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x77,0x69,0x74,0x63,0x68,0x20,0x28,0x74,0x2e,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x30,0x75,0x3a,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,
    0x63,0x32,0x28,0x5f,0x39,0x30,0x2c,0x20,0x5f,0x39,0x39,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x63,0x61,0x73,0x65,0x20,0x31,0x75,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x31,0x31,0x30,0x2c,
    0x20,0x5f,0x39,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x32,0x75,
    0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x28,0x5f,0x31,0x31,0x30,0x2c,0x20,0x5f,0x31,0x32,0x31,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x33,0x75,0x3a,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x39,
    0x30,0x2c,0x20,0x5f,0x31,0x32,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x65,0x66,0x61,
    0x75,0x6c,0x74,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x61,0x73,0x73,0x65,0x72,0x74,0x28,0x62,0x6f,0x6f,0x6c,
    0x20,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x78,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,
    0x3d,0x20,0x75,0x69,0x6e,0x74,0x28,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x69,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x74,0x75,
    0x72,0x65,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x75,0x6e,0x70,
    0x61,0x63,0x6b,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,
    0x5f,0x31,0x36,0x32,0x20,0x3d,0x20,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,
    0x61,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x36,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x36,0x37,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x36,0x37,0x20,0x3d,
    0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x20,0x3e,
    0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,
    0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x5f,0x31,0x36,0x37,0x20,0x3d,0x20,0x5f,0x31,0x36,0x32,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x31,0x36,0x37,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x61,0x73,0x73,0x65,0x72,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct params
    {
        float4x4 u_model;
        float4x4 u_view;
        float4x4 u_projection;
        int2 u_atlas_size;
    };

    struct main0_out
    {
        int fs_texture_id [[user(locn0)]];
        int2 fs_atlas_size [[user(locn1)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 vs_position [[attribute(0)]];
        int vs_texture_id [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant params& _20 [[buffer(0)]])
    {
        main0_out out = {};
        out.gl_Position = ((_20.u_projection * _20.u_view) * _20.u_model) * float4(in.vs_position, 1.0);
        out.fs_texture_id = in.vs_texture_id;
        out.fs_atlas_size = _20.u_atlas_size;
        return out;
    }

*/
static const uint8_t vs_source_metal_macos[743] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x78,0x34,0x20,0x75,0x5f,0x6d,0x6f,0x64,0x65,0x6c,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x5f,0x76,0x69,0x65,
    0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x75,0x5f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x32,0x20,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,
    0x69,0x7a,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,
    0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x32,0x20,0x66,0x73,0x5f,0x61,
    0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,
    0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x69,0x64,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,
    0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x61,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x30,
    0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x28,0x28,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,
    0x6f,0x6e,0x20,0x2a,0x20,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x76,0x69,0x65,0x77,0x29,
    0x20,0x2a,0x20,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x6d,0x6f,0x64,0x65,0x6c,0x29,0x20,
    0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x69,0x64,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x2e,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3d,
    0x20,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,
    0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,
    0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct Texture
    {
        uint id;
        uint texcoord;
    };

    struct Rect
    {
        int x;
        int y;
        int w;
        int h;
    };

    struct fs_atlas
    {
        Rect u_atlas[1];
    };

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        int fs_texture_id [[user(locn0)]];
        int2 fs_atlas_size [[user(locn1)]];
    };

    static inline __attribute__((always_inline))
    Texture unpack_texture_id(thread const uint& src)
    {
        return Texture{ src >> uint(16), src & 65535u };
    }

    static inline __attribute__((always_inline))
    float2 get_texcoord(thread const Texture& t, const device fs_atlas& _58, thread int2& fs_atlas_size)
    {
        float _89 = float(fs_atlas_size.x);
        float _90 = float(_58.u_atlas[t.id].x) / _89;
        float _98 = float(fs_atlas_size.y);
        float _99 = float(_58.u_atlas[t.id].y) / _98;
        float _110 = float(_58.u_atlas[t.id].x + _58.u_atlas[t.id].w) / _89;
        float _121 = float(_58.u_atlas[t.id].y + _58.u_atlas[t.id].h) / _98;
        switch (t.texcoord)
        {
            case 0u:
            {
                return float2(_90, _99);
            }
            case 1u:
            {
                return float2(_110, _99);
            }
            case 2u:
            {
                return float2(_110, _121);
            }
            case 3u:
            {
                return float2(_90, _121);
            }
            default:
            {
                return float2(0.0);
            }
        }
    }

    static inline __attribute__((always_inline))
    void assert0(thread const bool& x, thread float4& frag_color)
    {
        if (x)
        {
            frag_color = float4(1.0, 0.0, 0.0, 1.0);
        }
        else
        {
            frag_color = float4(0.0, 1.0, 0.0, 1.0);
        }
    }

    fragment main0_out main0(main0_in in [[stage_in]], const device fs_atlas& _58 [[buffer(8)]])
    {
        main0_out out = {};
        uint param = uint(in.fs_texture_id);
        Texture param_1 = unpack_texture_id(param);
        bool _162 = _58.u_atlas[0].w == 16;
        bool _167;
        if (_162)
        {
            _167 = in.fs_texture_id >= 0;
        }
        else
        {
            _167 = _162;
        }
        bool param_2 = _167;
        assert0(param_2, out.frag_color);
        return out;
    }

*/
static const uint8_t fs_source_metal_macos[2188] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x69,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x52,0x65,0x63,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x78,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x68,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,0x73,0x5f,0x61,0x74,
    0x6c,0x61,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x52,0x65,0x63,0x74,0x20,0x75,
    0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,
    0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,
    0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x32,0x20,0x66,0x73,0x5f,0x61,
    0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,
    0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,
    0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x54,0x65,0x78,0x74,
    0x75,0x72,0x65,0x20,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x69,0x64,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,
    0x73,0x74,0x20,0x75,0x69,0x6e,0x74,0x26,0x20,0x73,0x72,0x63,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x54,0x65,0x78,0x74,0x75,
    0x72,0x65,0x7b,0x20,0x73,0x72,0x63,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,
    0x31,0x36,0x29,0x2c,0x20,0x73,0x72,0x63,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,
    0x75,0x20,0x7d,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,
    0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,
    0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,
    0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x67,0x65,0x74,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,
    0x63,0x6f,0x6e,0x73,0x74,0x20,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x26,0x20,0x74,
    0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x20,0x66,
    0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x26,0x20,0x5f,0x35,0x38,0x2c,0x20,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x69,0x6e,0x74,0x32,0x26,0x20,0x66,0x73,0x5f,0x61,0x74,
    0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x39,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x28,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x2e,
    0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,
    0x30,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x35,0x38,0x2e,0x75,0x5f,
    0x61,0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x78,0x29,0x20,0x2f,
    0x20,0x5f,0x38,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x39,0x38,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x66,0x73,0x5f,0x61,
    0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x39,0x20,0x3d,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x28,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,
    0x74,0x2e,0x69,0x64,0x5d,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x39,0x38,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x31,0x30,0x20,0x3d,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,
    0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x78,0x20,0x2b,0x20,0x5f,0x35,0x38,
    0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x77,
    0x29,0x20,0x2f,0x20,0x5f,0x38,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x31,0x32,0x31,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,
    0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,
    0x5d,0x2e,0x79,0x20,0x2b,0x20,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,
    0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x68,0x29,0x20,0x2f,0x20,0x5f,0x39,0x38,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x77,0x69,0x74,0x63,0x68,0x20,0x28,0x74,0x2e,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x30,0x75,0x3a,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x28,0x5f,0x39,0x30,0x2c,0x20,0x5f,0x39,0x39,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x31,0x75,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x5f,
    0x31,0x31,0x30,0x2c,0x20,0x5f,0x39,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,
    0x65,0x20,0x32,0x75,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x5f,0x31,0x31,0x30,0x2c,0x20,
    0x5f,0x31,0x32,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x33,0x75,
    0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x28,0x5f,0x39,0x30,0x2c,0x20,0x5f,0x31,0x32,0x31,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x3a,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,
    0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,
    0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x76,0x6f,0x69,0x64,0x20,0x61,0x73,0x73,0x65,
    0x72,0x74,0x30,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x20,0x62,0x6f,0x6f,0x6c,0x26,0x20,0x78,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x26,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x78,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,
    0x26,0x20,0x5f,0x35,0x38,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x38,
    0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,
    0x75,0x69,0x6e,0x74,0x28,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x69,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x74,
    0x75,0x72,0x65,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x75,0x6e,
    0x70,0x61,0x63,0x6b,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,
    0x20,0x5f,0x31,0x36,0x32,0x20,0x3d,0x20,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,
    0x6c,0x61,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x36,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x31,0x36,0x37,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x32,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x36,0x37,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x69,0x64,0x20,0x3e,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x36,0x37,0x20,0x3d,0x20,0x5f,0x31,0x36,
    0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,
    0x6c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x31,0x36,0x37,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x73,0x73,0x65,0x72,0x74,0x30,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* terrain_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_source_glsl430;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_source_glsl430;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "vs_position";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_SINT;
            desc.attrs[1].glsl_name = "vs_texture_id";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 208;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_MAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "_20.u_model";
            desc.uniform_blocks[0].glsl_uniforms[1].type = SG_UNIFORMTYPE_MAT4;
            desc.uniform_blocks[0].glsl_uniforms[1].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[1].glsl_name = "_20.u_view";
            desc.uniform_blocks[0].glsl_uniforms[2].type = SG_UNIFORMTYPE_MAT4;
            desc.uniform_blocks[0].glsl_uniforms[2].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[2].glsl_name = "_20.u_projection";
            desc.uniform_blocks[0].glsl_uniforms[3].type = SG_UNIFORMTYPE_INT2;
            desc.uniform_blocks[0].glsl_uniforms[3].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[3].glsl_name = "_20.u_atlas_size";
            desc.storage_buffers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.storage_buffers[0].readonly = true;
            desc.storage_buffers[0].glsl_binding_n = 0;
            desc.label = "terrain_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_source_metal_macos;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = (const char*)fs_source_metal_macos;
            desc.fragment_func.entry = "main0";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_SINT;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 208;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.storage_buffers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.storage_buffers[0].readonly = true;
            desc.storage_buffers[0].msl_buffer_n = 8;
            desc.label = "terrain_shader";
        }
        return &desc;
    }
    return 0;
}
