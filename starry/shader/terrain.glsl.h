// Autogenerated by MrShader
// Source: starry/shader/terrain.glsl

#ifndef _ST_TERRAIN_SHADER_H
#define _ST_TERRAIN_SHADER_H

#ifdef __cplusplus
constexpr const char* ST_TERRAIN_SHADER_VERTEX = 
#else
static const char* ST_TERRAIN_SHADER_VERTEX = 
#endif
	"#version 430 core\n"
	"#line 34\n"
	"// TODO add includes to mrshader\n"
	"#line 35\n"
	"struct Vertex {\n"
	"#line 36\n"
	"\tuvec3 position;\n"
	"#line 37\n"
	"\tuint normal;\n"
	"#line 38\n"
	"\tuint quad_corner;\n"
	"#line 39\n"
	"\tbool shaded;\n"
	"#line 40\n"
	"\tbool using_texture;\n"
	"#line 41\n"
	"\tuint texture_id;\n"
	"#line 42\n"
	"\tuvec4 color;\n"
	"#line 43\n"
	"};\n"
	"#line 44\n"
	"\n"
	"#line 45\n"
	"#define NORMAL_FORWARD 0u\n"
	"#line 46\n"
	"#define NORMAL_BACK 1u\n"
	"#line 47\n"
	"#define NORMAL_LEFT 2u\n"
	"#line 48\n"
	"#define NORMAL_RIGHT 3u\n"
	"#line 49\n"
	"#define NORMAL_UP 4u\n"
	"#line 50\n"
	"#define NORMAL_DOWN 5u\n"
	"#line 51\n"
	"\n"
	"#line 52\n"
	"#define QUAD_CORNER_TOP_LEFT 0u\n"
	"#line 53\n"
	"#define QUAD_CORNER_TOP_RIGHT 1u\n"
	"#line 54\n"
	"#define QUAD_CORNER_BOTTOM_LEFT 2u\n"
	"#line 55\n"
	"#define QUAD_CORNER_BOTTOM_RIGHT 3u\n"
	"#line 56\n"
	"\n"
	"#line 57\n"
	"Vertex unpack_vertex(uvec2 src)\n"
	"#line 58\n"
	"{\n"
	"#line 59\n"
	"\tuint low = src.x;\n"
	"#line 60\n"
	"\tuint high = src.y;\n"
	"#line 61\n"
	"\tVertex v;\n"
	"#line 62\n"
	"\n"
	"#line 63\n"
	"\tv.position.x = low & 0xFFu;\n"
	"#line 64\n"
	"\tv.position.y = (low >> 8)  & 0xFFu;\n"
	"#line 65\n"
	"\tv.position.z = (low >> 16) & 0xFFu;\n"
	"#line 66\n"
	"\n"
	"#line 67\n"
	"\tv.normal = (low >> 24) & 0xFu;\n"
	"#line 68\n"
	"\tv.quad_corner = (low >> 28) & 0x3u;\n"
	"#line 69\n"
	"\tv.shaded = ((low >> 30) & 0x1u) != 0u;\n"
	"#line 70\n"
	"\tv.using_texture = ((low >> 31) & 0x1u) != 0u;\n"
	"#line 71\n"
	"\n"
	"#line 72\n"
	"\tif (v.using_texture) {\n"
	"#line 73\n"
	"\t\tv.texture_id = high & 0x3FFFu;\n"
	"#line 74\n"
	"\t\tv.color = uvec4(0);\n"
	"#line 75\n"
	"\t}\n"
	"#line 76\n"
	"\telse {\n"
	"#line 77\n"
	"\t\tv.color.r = (high >> 0) & 0xFFu;\n"
	"#line 78\n"
	"\t\tv.color.g = (high >> 8) & 0xFFu;\n"
	"#line 79\n"
	"\t\tv.color.b = (high >> 16) & 0xFFu;\n"
	"#line 80\n"
	"\t\tv.color.a = (high >> 24) & 0xFFu;\n"
	"#line 81\n"
	"\t\tv.texture_id = 0u;\n"
	"#line 82\n"
	"\t}\n"
	"#line 83\n"
	"\n"
	"#line 84\n"
	"\treturn v;\n"
	"#line 85\n"
	"}\n"
	"#line 86\n"
	"\n"
	"#line 87\n"
	"struct Rect {\n"
	"#line 88\n"
	"\tuint x;\n"
	"#line 89\n"
	"\tuint y;\n"
	"#line 90\n"
	"\tuint width;\n"
	"#line 91\n"
	"\tuint height;\n"
	"#line 92\n"
	"};\n"
	"#line 93\n"
	"\n"
	"#line 94\n"
	"// vertices are hyper optimized to safe space\n"
	"#line 95\n"
	"layout (location = 0) in uvec2 vs_packed;\n"
	"#line 96\n"
	"\n"
	"#line 97\n"
	"out vec2 fs_texcoords;\n"
	"#line 98\n"
	"out vec4 fs_color;\n"
	"#line 99\n"
	"// you can't pass a bool here :DDDDD\n"
	"#line 100\n"
	"flat out int fs_using_texture;\n"
	"#line 101\n"
	"flat out int fs_shaded;\n"
	"#line 102\n"
	"\n"
	"#line 104\n"
	"uniform mat4 u_model;\n"
	"#line 106\n"
	"uniform mat4 u_view;\n"
	"#line 108\n"
	"uniform mat4 u_projection;\n"
	"#line 109\n"
	"\n"
	"#line 110\n"
	"#define CHUNK_SIZE 32\n"
	"#line 112\n"
	"uniform uvec3 u_chunk;\n"
	"#line 114\n"
	"uniform uvec2 u_atlas_size;\n"
	"#line 115\n"
	"\n"
	"#line 117\n"
	"layout(binding = 0, std430) readonly buffer atlas {\n"
	"#line 118\n"
	"\t// storing the whole 16k rects is faster than implementing hashmaps on the gpu\n"
	"#line 119\n"
	"\tRect u_atlas_textures[];\n"
	"#line 120\n"
	"};\n"
	"#line 121\n"
	"\n"
	"#line 122\n"
	"// get texcoords (it's faster to calculate it in the vertex shader since it runs less times)\n"
	"#line 123\n"
	"vec2 get_texcoords(Vertex v)\n"
	"#line 124\n"
	"{\n"
	"#line 125\n"
	"\tvec2 texcoords;\n"
	"#line 126\n"
	"\tRect texture_rect = u_atlas_textures[v.texture_id];\n"
	"#line 127\n"
	"\n"
	"#line 128\n"
	"\tswitch (v.quad_corner) {\n"
	"#line 129\n"
	"\tcase QUAD_CORNER_TOP_LEFT:\n"
	"#line 130\n"
	"\t\ttexcoords = vec2(float(texture_rect.x), float(texture_rect.y));\n"
	"#line 131\n"
	"\t\tbreak;\n"
	"#line 132\n"
	"\tcase QUAD_CORNER_TOP_RIGHT:\n"
	"#line 133\n"
	"\t\ttexcoords = vec2(float(texture_rect.x + texture_rect.width), float(texture_rect.y));\n"
	"#line 134\n"
	"\t\tbreak;\n"
	"#line 135\n"
	"\tcase QUAD_CORNER_BOTTOM_LEFT:\n"
	"#line 136\n"
	"\t\ttexcoords = vec2(float(texture_rect.x), float(texture_rect.y + texture_rect.height));\n"
	"#line 137\n"
	"\t\tbreak;\n"
	"#line 138\n"
	"\tcase QUAD_CORNER_BOTTOM_RIGHT:\n"
	"#line 139\n"
	"\t\ttexcoords = vec2(float(texture_rect.x + texture_rect.width),\n"
	"#line 140\n"
	"\t\t\tfloat(texture_rect.y + texture_rect.height)\n"
	"#line 141\n"
	"\t\t);\n"
	"#line 142\n"
	"\t\tbreak;\n"
	"#line 143\n"
	"\t}\n"
	"#line 144\n"
	"\n"
	"#line 145\n"
	"\treturn texcoords / vec2(u_atlas_size);\n"
	"#line 146\n"
	"}\n"
	"#line 147\n"
	"\n"
	"#line 148\n"
	"void main()\n"
	"#line 149\n"
	"{\n"
	"#line 150\n"
	"\tVertex v = unpack_vertex(vs_packed);\n"
	"#line 151\n"
	"\n"
	"#line 152\n"
	"\tvec3 position = vec3(v.position) * (vec3(u_chunk) * CHUNK_SIZE);\n"
	"#line 153\n"
	"\tgl_Position = u_projection * u_view * u_model * vec4(position, 1.0);\n"
	"#line 154\n"
	"\n"
	"#line 155\n"
	"\tif (v.using_texture) {\n"
	"#line 156\n"
	"\t\tfs_texcoords = get_texcoords(v);\n"
	"#line 157\n"
	"\t\tfs_color = vec4(1, 1, 1, 1);\n"
	"#line 158\n"
	"\t}\n"
	"#line 159\n"
	"\telse {\n"
	"#line 160\n"
	"\t\tfs_texcoords = vec2(0, 0);\n"
	"#line 161\n"
	"\t\tfs_color = vec4(v.color) / 255;\n"
	"#line 162\n"
	"\t}\n"
	"#line 163\n"
	"\tfs_using_texture = int(v.using_texture);\n"
	"#line 164\n"
	"\tfs_shaded = int(v.shaded);\n"
	"#line 165\n"
	"}\n"
	"#line 166\n"
	"\n";

#ifdef __cplusplus
constexpr const char* ST_TERRAIN_SHADER_FRAGMENT = 
#else
static const char* ST_TERRAIN_SHADER_FRAGMENT = 
#endif
	"#version 430 core\n"
	"#line 168\n"
	"in vec2 fs_texcoords;\n"
	"#line 169\n"
	"in vec4 fs_color;\n"
	"#line 170\n"
	"flat in int fs_using_texture;\n"
	"#line 171\n"
	"flat in int fs_shaded;\n"
	"#line 172\n"
	"\n"
	"#line 173\n"
	"out vec4 frag_color;\n"
	"#line 174\n"
	"\n"
	"#line 175\n"
	"uniform sampler2D u_texture;\n"
	"#line 176\n"
	"\n"
	"#line 177\n"
	"void main()\n"
	"#line 178\n"
	"{\n"
	"#line 179\n"
	"\t// TODO lighting\n"
	"#line 180\n"
	"\tif (bool(fs_using_texture)) {\n"
	"#line 181\n"
	"\t\tfrag_color = texture(u_texture, fs_texcoords);\n"
	"#line 182\n"
	"\t}\n"
	"#line 183\n"
	"\telse {\n"
	"#line 184\n"
	"\t\tfrag_color = fs_color;\n"
	"#line 185\n"
	"\t}\n"
	"#line 186\n"
	"}\n";

#define ST_TERRAIN_SHADER_U_PROJECTION "u_projection"
#define ST_TERRAIN_SHADER_U_ATLAS_SIZE "u_atlas_size"
#define ST_TERRAIN_SHADER_U_VIEW "u_view"
#define ST_TERRAIN_SHADER_U_MODEL "u_model"
#define ST_TERRAIN_SHADER_SSBO_ATLAS 0
#define ST_TERRAIN_SHADER_U_CHUNK "u_chunk"

#endif
