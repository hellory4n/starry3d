#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i starry/shader/terrain.glsl -o starry/shader/terrain.glsl.h -l glsl430:hlsl5

    Overview:
    =========
    Shader program: 'terrain':
        Get shader desc: terrain_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_terrain_vs_position => 0
            ATTR_terrain_vs_texture_id => 1
    Bindings:
        Uniform block 'params':
            C struct: params_t
            Bind slot: UB_params => 0
        Storage buffer 'fs_atlas':
            C struct: Rect_t
            Bind slot: SBUF_fs_atlas => 0
            Readonly: true
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before terrain.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_terrain_vs_position (0)
#define ATTR_terrain_vs_texture_id (1)
#define UB_params (0)
#define SBUF_fs_atlas (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct params_t {
    tr::Matrix4x4 u_model;
    tr::Matrix4x4 u_view;
    tr::Matrix4x4 u_projection;
    int u_atlas_size[2];
    uint8_t _pad_200[8];
} params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(4) typedef struct Rect_t {
    uint32_t x;
    uint32_t y;
    uint32_t w;
    uint32_t h;
} Rect_t;
#pragma pack(pop)
/*
    #version 430

    struct params
    {
        mat4 u_model;
        mat4 u_view;
        mat4 u_projection;
        ivec2 u_atlas_size;
    };

    uniform params _20;

    layout(location = 0) in vec3 vs_position;
    layout(location = 0) flat out uint fs_texture_id;
    layout(location = 1) in uint vs_texture_id;
    layout(location = 1) flat out ivec2 fs_atlas_size;

    void main()
    {
        gl_Position = ((_20.u_projection * _20.u_view) * _20.u_model) * vec4(vs_position, 1.0);
        fs_texture_id = vs_texture_id;
        fs_atlas_size = _20.u_atlas_size;
    }

*/
static const uint8_t vs_source_glsl430[508] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x75,0x5f,0x6d,0x6f,0x64,0x65,0x6c,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x75,0x5f,0x76,0x69,0x65,0x77,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x75,0x5f,0x70,0x72,0x6f,0x6a,
    0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,
    0x32,0x20,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x20,0x5f,0x32,0x30,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x66,0x6c,0x61,0x74,0x20,0x6f,0x75,0x74,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x69,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x75,0x69,0x6e,
    0x74,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x31,0x29,0x20,0x66,0x6c,0x61,0x74,0x20,0x6f,0x75,0x74,0x20,0x69,
    0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,
    0x7a,0x65,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x28,0x28,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x70,0x72,0x6f,
    0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,0x2a,0x20,0x5f,0x32,0x30,0x2e,0x75,0x5f,
    0x76,0x69,0x65,0x77,0x29,0x20,0x2a,0x20,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x6d,0x6f,
    0x64,0x65,0x6c,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,
    0x20,0x3d,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,
    0x69,0x7a,0x65,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,
    0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 430

    struct Texture
    {
        uint id;
        uint texcoord;
    };

    struct Rect
    {
        uint x;
        uint y;
        uint w;
        uint h;
    };

    layout(binding = 0, std430) readonly buffer fs_atlas
    {
        Rect u_atlas[];
    } _58;

    layout(location = 0) out vec4 frag_color;
    layout(location = 1) flat in ivec2 fs_atlas_size;
    layout(location = 0) flat in uint fs_texture_id;

    Texture unpack_texture_id(uint src)
    {
        return Texture(src >> uint(16), src & 65535u);
    }

    vec2 get_texcoord(Texture t)
    {
        float _88 = float(fs_atlas_size.x);
        float _89 = float(_58.u_atlas[t.id].x) / _88;
        float _97 = float(fs_atlas_size.y);
        float _98 = float(_58.u_atlas[t.id].y) / _97;
        float _109 = float(_58.u_atlas[t.id].x + _58.u_atlas[t.id].w) / _88;
        float _120 = float(_58.u_atlas[t.id].y + _58.u_atlas[t.id].h) / _97;
        switch (t.texcoord)
        {
            case 0u:
            {
                return vec2(_89, _98);
            }
            case 1u:
            {
                return vec2(_109, _98);
            }
            case 2u:
            {
                return vec2(_109, _120);
            }
            case 3u:
            {
                return vec2(_89, _120);
            }
            default:
            {
                return vec2(0.0);
            }
        }
    }

    void assert(bool x)
    {
        if (x)
        {
            frag_color = vec4(1.0, 0.0, 0.0, 1.0);
        }
        else
        {
            frag_color = vec4(0.0, 1.0, 0.0, 1.0);
        }
    }

    void main()
    {
        uint param = fs_texture_id;
        Texture param_1 = unpack_texture_id(param);
        bool param_2 = _58.u_atlas[0].w == 16u;
        assert(param_2);
    }

*/
static const uint8_t fs_source_glsl430[1531] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x69,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x75,0x69,0x6e,0x74,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x52,0x65,0x63,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x78,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,
    0x74,0x20,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x68,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x62,0x69,0x6e,0x64,
    0x69,0x6e,0x67,0x20,0x3d,0x20,0x30,0x2c,0x20,0x73,0x74,0x64,0x34,0x33,0x30,0x29,
    0x20,0x72,0x65,0x61,0x64,0x6f,0x6e,0x6c,0x79,0x20,0x62,0x75,0x66,0x66,0x65,0x72,
    0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x52,0x65,0x63,0x74,0x20,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x5d,0x3b,0x0a,
    0x7d,0x20,0x5f,0x35,0x38,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x66,0x6c,0x61,0x74,0x20,0x69,0x6e,0x20,0x69,
    0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,
    0x7a,0x65,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x66,0x6c,0x61,0x74,0x20,0x69,0x6e,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x69,0x64,0x3b,0x0a,0x0a,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x75,0x6e,
    0x70,0x61,0x63,0x6b,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x28,
    0x75,0x69,0x6e,0x74,0x20,0x73,0x72,0x63,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x73,
    0x72,0x63,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x31,0x36,0x29,0x2c,0x20,
    0x73,0x72,0x63,0x20,0x26,0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x76,0x65,0x63,0x32,0x20,0x67,0x65,0x74,0x5f,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x28,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x74,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x38,0x20,0x3d,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,
    0x73,0x69,0x7a,0x65,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x38,0x39,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,
    0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,
    0x2e,0x78,0x29,0x20,0x2f,0x20,0x5f,0x38,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x37,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x28,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x2e,0x79,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x38,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,
    0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x79,0x29,0x20,0x2f,0x20,
    0x5f,0x39,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x30,0x39,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x35,0x38,0x2e,
    0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x78,0x20,
    0x2b,0x20,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,
    0x69,0x64,0x5d,0x2e,0x77,0x29,0x20,0x2f,0x20,0x5f,0x38,0x38,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x30,0x20,0x3d,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x28,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,
    0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x79,0x20,0x2b,0x20,0x5f,0x35,0x38,0x2e,0x75,
    0x5f,0x61,0x74,0x6c,0x61,0x73,0x5b,0x74,0x2e,0x69,0x64,0x5d,0x2e,0x68,0x29,0x20,
    0x2f,0x20,0x5f,0x39,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x77,0x69,0x74,0x63,
    0x68,0x20,0x28,0x74,0x2e,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,
    0x65,0x20,0x30,0x75,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x38,0x39,0x2c,0x20,0x5f,0x39,0x38,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x31,0x75,0x3a,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,
    0x5f,0x31,0x30,0x39,0x2c,0x20,0x5f,0x39,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,
    0x73,0x65,0x20,0x32,0x75,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x31,0x30,0x39,0x2c,0x20,0x5f,
    0x31,0x32,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x33,0x75,0x3a,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,
    0x63,0x32,0x28,0x5f,0x38,0x39,0x2c,0x20,0x5f,0x31,0x32,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x61,0x73,0x73,0x65,0x72,0x74,
    0x28,0x62,0x6f,0x6f,0x6c,0x20,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x78,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x69,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x74,0x75,0x72,
    0x65,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x75,0x6e,0x70,0x61,
    0x63,0x6b,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x35,0x38,0x2e,0x75,0x5f,0x61,
    0x74,0x6c,0x61,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x36,0x75,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x73,0x73,0x65,0x72,0x74,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    cbuffer params : register(b0)
    {
        row_major float4x4 _20_u_model : packoffset(c0);
        row_major float4x4 _20_u_view : packoffset(c4);
        row_major float4x4 _20_u_projection : packoffset(c8);
        int2 _20_u_atlas_size : packoffset(c12);
    };


    static float4 gl_Position;
    static float3 vs_position;
    static uint fs_texture_id;
    static uint vs_texture_id;
    static int2 fs_atlas_size;

    struct SPIRV_Cross_Input
    {
        float3 vs_position : TEXCOORD0;
        uint vs_texture_id : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        nointerpolation uint fs_texture_id : TEXCOORD0;
        nointerpolation int2 fs_atlas_size : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        gl_Position = mul(float4(vs_position, 1.0f), mul(_20_u_model, mul(_20_u_view, _20_u_projection)));
        fs_texture_id = vs_texture_id;
        fs_atlas_size = _20_u_atlas_size;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        vs_position = stage_input.vs_position;
        vs_texture_id = stage_input.vs_texture_id;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.fs_texture_id = fs_texture_id;
        stage_output.fs_atlas_size = fs_atlas_size;
        return stage_output;
    }
*/
static const uint8_t vs_source_hlsl5[1225] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,
    0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x32,0x30,0x5f,0x75,0x5f,0x6d,0x6f,0x64,
    0x65,0x6c,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,
    0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x32,0x30,0x5f,
    0x75,0x5f,0x76,0x69,0x65,0x77,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x63,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,
    0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x5f,0x32,0x30,0x5f,0x75,0x5f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x38,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x32,0x20,0x5f,0x32,0x30,0x5f,
    0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x32,0x29,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,
    0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x75,0x69,0x6e,0x74,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x69,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x75,0x69,0x6e,
    0x74,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x74,0x32,0x20,0x66,0x73,0x5f,
    0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,
    0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x75,0x69,0x6e,0x74,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x69,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x6e,0x6f,0x69,0x6e,0x74,0x65,0x72,0x70,0x6f,0x6c,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x75,0x69,0x6e,0x74,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x69,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x6f,0x69,0x6e,0x74,0x65,0x72,0x70,
    0x6f,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x74,0x32,0x20,0x66,0x73,0x5f,
    0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,
    0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x2c,0x20,0x6d,0x75,0x6c,0x28,0x5f,0x32,0x30,0x5f,0x75,0x5f,
    0x6d,0x6f,0x64,0x65,0x6c,0x2c,0x20,0x6d,0x75,0x6c,0x28,0x5f,0x32,0x30,0x5f,0x75,
    0x5f,0x76,0x69,0x65,0x77,0x2c,0x20,0x5f,0x32,0x30,0x5f,0x75,0x5f,0x70,0x72,0x6f,
    0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x20,0x3d,0x20,
    0x76,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,
    0x20,0x3d,0x20,0x5f,0x32,0x30,0x5f,0x75,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,
    0x69,0x7a,0x65,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,
    0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,
    0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x20,0x3d,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x73,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x73,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x20,0x3d,0x20,0x66,0x73,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x73,
    0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3d,0x20,0x66,0x73,
    0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    struct Texture
    {
        uint id;
        uint texcoord;
    };

    struct Rect
    {
        uint x;
        uint y;
        uint w;
        uint h;
    };

    ByteAddressBuffer _58 : register(t16);

    static float4 frag_color;
    static int2 fs_atlas_size;
    static uint fs_texture_id;

    struct SPIRV_Cross_Input
    {
        nointerpolation uint fs_texture_id : TEXCOORD0;
        nointerpolation int2 fs_atlas_size : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };

    Texture unpack_texture_id(uint src)
    {
        Texture _48 = { src >> uint(16), src & 65535u };
        return _48;
    }

    float2 get_texcoord(Texture t)
    {
        Rect _64;
        _64.x = _58.Load(t.id * 16 + 0);
        _64.y = _58.Load(t.id * 16 + 4);
        _64.w = _58.Load(t.id * 16 + 8);
        _64.h = _58.Load(t.id * 16 + 12);
        float _88 = float(fs_atlas_size.x);
        float _89 = float(_64.x) / _88;
        float _97 = float(fs_atlas_size.y);
        float _98 = float(_64.y) / _97;
        float _109 = float(_64.x + _64.w) / _88;
        float _120 = float(_64.y + _64.h) / _97;
        switch (t.texcoord)
        {
            case 0u:
            {
                return float2(_89, _98);
            }
            case 1u:
            {
                return float2(_109, _98);
            }
            case 2u:
            {
                return float2(_109, _120);
            }
            case 3u:
            {
                return float2(_89, _120);
            }
            default:
            {
                return 0.0f.xx;
            }
        }
    }

    void assert(bool x)
    {
        if (x)
        {
            frag_color = float4(1.0f, 0.0f, 0.0f, 1.0f);
        }
        else
        {
            frag_color = float4(0.0f, 1.0f, 0.0f, 1.0f);
        }
    }

    void frag_main()
    {
        uint param = fs_texture_id;
        Texture param_1 = unpack_texture_id(param);
        bool param_2 = _58.Load(8) == 16u;
        assert(param_2);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        fs_atlas_size = stage_input.fs_atlas_size;
        fs_texture_id = stage_input.fs_texture_id;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const uint8_t fs_source_hlsl5[2007] = {
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x69,0x64,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x52,0x65,0x63,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x78,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x69,0x6e,0x74,0x20,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x68,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x42,0x79,0x74,0x65,0x41,0x64,0x64,0x72,0x65,
    0x73,0x73,0x42,0x75,0x66,0x66,0x65,0x72,0x20,0x5f,0x35,0x38,0x20,0x3a,0x20,0x72,
    0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x31,0x36,0x29,0x3b,0x0a,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x69,0x6e,0x74,0x32,0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,
    0x7a,0x65,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x75,0x69,0x6e,0x74,0x20,
    0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,0x0a,0x0a,
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6e,
    0x6f,0x69,0x6e,0x74,0x65,0x72,0x70,0x6f,0x6c,0x61,0x74,0x69,0x6f,0x6e,0x20,0x75,
    0x69,0x6e,0x74,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,
    0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6e,0x6f,0x69,0x6e,0x74,0x65,0x72,0x70,0x6f,0x6c,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x69,0x6e,0x74,0x32,0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,
    0x5f,0x73,0x69,0x7a,0x65,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x31,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,
    0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,0x74,0x75,
    0x72,0x65,0x20,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x69,0x64,0x28,0x75,0x69,0x6e,0x74,0x20,0x73,0x72,0x63,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x5f,0x34,0x38,
    0x20,0x3d,0x20,0x7b,0x20,0x73,0x72,0x63,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,
    0x28,0x31,0x36,0x29,0x2c,0x20,0x73,0x72,0x63,0x20,0x26,0x20,0x36,0x35,0x35,0x33,
    0x35,0x75,0x20,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x5f,0x34,0x38,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x67,0x65,0x74,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x28,0x54,0x65,0x78,
    0x74,0x75,0x72,0x65,0x20,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x52,0x65,
    0x63,0x74,0x20,0x5f,0x36,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x36,0x34,0x2e,
    0x78,0x20,0x3d,0x20,0x5f,0x35,0x38,0x2e,0x4c,0x6f,0x61,0x64,0x28,0x74,0x2e,0x69,
    0x64,0x20,0x2a,0x20,0x31,0x36,0x20,0x2b,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x5f,0x36,0x34,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x35,0x38,0x2e,0x4c,0x6f,0x61,
    0x64,0x28,0x74,0x2e,0x69,0x64,0x20,0x2a,0x20,0x31,0x36,0x20,0x2b,0x20,0x34,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x36,0x34,0x2e,0x77,0x20,0x3d,0x20,0x5f,0x35,
    0x38,0x2e,0x4c,0x6f,0x61,0x64,0x28,0x74,0x2e,0x69,0x64,0x20,0x2a,0x20,0x31,0x36,
    0x20,0x2b,0x20,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x36,0x34,0x2e,0x68,
    0x20,0x3d,0x20,0x5f,0x35,0x38,0x2e,0x4c,0x6f,0x61,0x64,0x28,0x74,0x2e,0x69,0x64,
    0x20,0x2a,0x20,0x31,0x36,0x20,0x2b,0x20,0x31,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x38,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x28,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,
    0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x38,0x39,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x36,0x34,0x2e,0x78,
    0x29,0x20,0x2f,0x20,0x5f,0x38,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x39,0x37,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x66,
    0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x2e,0x79,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x38,0x20,0x3d,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x36,0x34,0x2e,0x79,0x29,0x20,0x2f,0x20,
    0x5f,0x39,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x30,0x39,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x36,0x34,0x2e,
    0x78,0x20,0x2b,0x20,0x5f,0x36,0x34,0x2e,0x77,0x29,0x20,0x2f,0x20,0x5f,0x38,0x38,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x30,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x5f,0x36,0x34,0x2e,0x79,0x20,0x2b,
    0x20,0x5f,0x36,0x34,0x2e,0x68,0x29,0x20,0x2f,0x20,0x5f,0x39,0x37,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x73,0x77,0x69,0x74,0x63,0x68,0x20,0x28,0x74,0x2e,0x74,0x65,0x78,
    0x63,0x6f,0x6f,0x72,0x64,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x30,0x75,0x3a,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x28,0x5f,0x38,0x39,0x2c,0x20,0x5f,0x39,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,
    0x61,0x73,0x65,0x20,0x31,0x75,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x5f,0x31,0x30,0x39,
    0x2c,0x20,0x5f,0x39,0x38,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x32,
    0x75,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x5f,0x31,0x30,0x39,0x2c,0x20,0x5f,0x31,0x32,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x33,0x75,0x3a,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x5f,0x38,0x39,0x2c,0x20,0x5f,0x31,0x32,0x30,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x61,0x73,0x73,0x65,0x72,0x74,0x28,0x62,
    0x6f,0x6f,0x6c,0x20,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x78,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,
    0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x69,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x74,0x75,0x72,0x65,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x75,0x6e,0x70,0x61,0x63,
    0x6b,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x35,0x38,0x2e,0x4c,0x6f,0x61,0x64,
    0x28,0x38,0x29,0x20,0x3d,0x3d,0x20,0x31,0x36,0x75,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x61,0x73,0x73,0x65,0x72,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x73,0x5f,0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3d,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,
    0x61,0x74,0x6c,0x61,0x73,0x5f,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x73,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x20,0x3d,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x69,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
static inline const sg_shader_desc* terrain_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_source_glsl430;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_source_glsl430;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "vs_position";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_UINT;
            desc.attrs[1].glsl_name = "vs_texture_id";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 208;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_MAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "_20.u_model";
            desc.uniform_blocks[0].glsl_uniforms[1].type = SG_UNIFORMTYPE_MAT4;
            desc.uniform_blocks[0].glsl_uniforms[1].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[1].glsl_name = "_20.u_view";
            desc.uniform_blocks[0].glsl_uniforms[2].type = SG_UNIFORMTYPE_MAT4;
            desc.uniform_blocks[0].glsl_uniforms[2].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[2].glsl_name = "_20.u_projection";
            desc.uniform_blocks[0].glsl_uniforms[3].type = SG_UNIFORMTYPE_INT2;
            desc.uniform_blocks[0].glsl_uniforms[3].array_count = 0;
            desc.uniform_blocks[0].glsl_uniforms[3].glsl_name = "_20.u_atlas_size";
            desc.storage_buffers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.storage_buffers[0].readonly = true;
            desc.storage_buffers[0].glsl_binding_n = 0;
            desc.label = "terrain_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_source_hlsl5;
            desc.vertex_func.d3d11_target = "vs_5_0";
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_source_hlsl5;
            desc.fragment_func.d3d11_target = "ps_5_0";
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].hlsl_sem_name = "TEXCOORD";
            desc.attrs[0].hlsl_sem_index = 0;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_UINT;
            desc.attrs[1].hlsl_sem_name = "TEXCOORD";
            desc.attrs[1].hlsl_sem_index = 1;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 208;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.storage_buffers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.storage_buffers[0].readonly = true;
            desc.storage_buffers[0].hlsl_register_t_n = 16;
            desc.label = "terrain_shader";
        }
        return &desc;
    }
    return 0;
}
