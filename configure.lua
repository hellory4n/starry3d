----------------------------------------
-- CHANGE THESE FOR YOUR OWN PROJECTS --
----------------------------------------
project = "sandbox"
starrydir = "."
builddir = "build"
assetssrc = "sandbox/assets"
assetsdst = "build/bin/assets"

imgui_enabled = true

srcs = {
	"sandbox/src/main.cpp",
	"sandbox/src/app.cpp",
}

includes = {
	"sandbox/src"
}

-----------------------
-- ACTUAL BUILD CRAP --
-----------------------
io.write("Starry3D auto configurator 3000++\n")

io.write("Compile mode (debug/release): ")
compmode = io.read("*l")
assert(compmode == "debug" or compmode == "release")

io.write("Target platform (windows/linux, windows requires mingw-w64 gcc and g++): ")
platform = io.read("*l")
assert(platform == "linux" or platform == "windows")

io.write("Use a sanitizer? (e.g. 'address' for asan, press enter to not use one): ")
sanitize = io.read("*l")

io.write("Generate compile_commands.json for clangd? (y/n): ")
compile_commands = io.read("*l")
assert(compile_commands == "y" or compile_commands == "n")

io.write("\nGenerating...\n")

---------------------------------------------------------------------
-- GETTING THE CRAP INFORMATION SO IT CAN ACTUALLY GENERATE FRFRFR --
---------------------------------------------------------------------

compiler = "clang++"
if platform == "windows" then
	compiler = "x86_64-w64-mingw32-g++"
end

cflags = "-std=c++17 -Wall -Wextra -Wpedantic "

-- includes
cflags = cflags ..
	" -I"..starrydir..
	" -I"..starrydir.."/thirdparty"..
	" -I"..starrydir.."/thirdparty/libtrippin"

if imgui_enabled then
	cflags = cflags ..
		" -I"..starrydir.."/thirdparty/imgui"
end

-- custom includes
for _, include in ipairs(includes) do
	cflags = cflags.." -I"..include
end

-- source files
srcsfrfr = {
	-- libtrippin
	starrydir.."/thirdparty/libtrippin/trippin/collection.cpp",
	starrydir.."/thirdparty/libtrippin/trippin/common.cpp",
	starrydir.."/thirdparty/libtrippin/trippin/iofs.cpp",
	starrydir.."/thirdparty/libtrippin/trippin/log.cpp",
	starrydir.."/thirdparty/libtrippin/trippin/math.cpp",
	starrydir.."/thirdparty/libtrippin/trippin/memory.cpp",
	starrydir.."/thirdparty/libtrippin/trippin/string.cpp",
	starrydir.."/thirdparty/libtrippin/trippin/error.cpp",

	-- starry3d
	starrydir.."/starry/common.cpp",
	starrydir.."/starry/render.cpp",
}

-- imgui
if imgui_enabled then
	table.insert(srcsfrfr, starrydir.."/starry/imgui.cpp")
	table.insert(srcsfrfr, starrydir.."/thirdparty/imgui/imgui.cpp")
	table.insert(srcsfrfr, starrydir.."/thirdparty/imgui/imgui_widgets.cpp")
	table.insert(srcsfrfr, starrydir.."/thirdparty/imgui/imgui_tables.cpp")
	table.insert(srcsfrfr, starrydir.."/thirdparty/imgui/imgui_draw.cpp")
	table.insert(srcsfrfr, starrydir.."/thirdparty/imgui/imgui_demo.cpp")
end

-- custom sources
for _, src in ipairs(srcs) do
	table.insert(srcsfrfr, src)
end

-- ldflags
-- idfk why libglfw3.a goes into the src folder it just does
ldflags = "-Lbuild/glfw/src"

if platform == "windows" then
	ldflags = ldflags.." -lkernel32 -luser32 -lshell32 -lpthread -lstdc++ -static"
else
	-- TODO is -pthread necessary?
	ldflags = ldflags.." -lX11 -lXi -lXcursor -lGL -ldl -lm -lstdc++ -pthread"
	cflags = cflags.." -pthread"
end

-- man.
if compmode == "debug" then
	cflags = cflags.." -O0 -g -DDEBUG -D_DEBUG"
else
	cflags = cflags.." -O2"
end

if sanitize ~= "" then
	cflags = cflags.." -fsanitize="..sanitize
	ldflags = ldflags.." -fsanitize="..sanitize
end

------------------------------------------------
-- GENERATE THE BUILD FILES FRFRFR ONG NO CAP --
------------------------------------------------

local f = io.open("build.ninja", "w")
assert(f)

f:write("# Autogenerated by configure.lua. You probably shouldn't edit this.\n")
f:write("cxx = "..compiler.."\n")
f:write("cflags = "..cflags.."\n")
f:write("ldflags = "..ldflags.."\n")

f:write("\nrule compile\n")
f:write("  command = $cxx $cflags -c $in -o $out\n")
f:write("  description = Compiling $in\n")

f:write("\nrule link\n")
f:write("  command = $cxx $in $ldflags -o $out && "..
	-- that's to copy assets :)
	"mkdir "..assetsdst.." -p && cp -r "..assetssrc.."/* "..assetsdst.."\n")
f:write("  description = Linking $out\n")

-- build crap :)
for _, src in ipairs(srcsfrfr) do
	f:write("build "..builddir.."/obj/"..src:gsub("%.cpp", ".o"):gsub("/", "_")..": compile "..src.."\n")
end

-- link crap :)
f:write("\nbuild "..builddir.."/bin/"..project..": link ")
for _, src in ipairs(srcsfrfr) do
	f:write(builddir.."/obj/"..src:gsub("%.cpp", ".o"):gsub("/", "_").." ")
end

f:write("\ndefault "..builddir.."/bin/"..project.."\n")

f:close()

----------------
-- ITS JOEVER --
----------------

io.write("Generated build.ninja; run `ninja` to compile\n")

if compile_commands == "y" then
	os.execute("ninja -t compdb > compile_commands.json")
end
